// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Reservation {
  id          String    @id @default(cuid())
  date        DateTime
  duration    Int
  startTime   String
  guests      Int
  pickup      String
  dropoff     String
  occasion    String?
  price       Int
  createdBy   String
  createdAt   DateTime  @default(now())

  // Add reverse relations for Customer and BusType
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id])

  busTypeId   String
  busType     BusType  @relation(fields: [busTypeId], references: [id])

  payments    Payment[]
  activityLogs ActivityLog[]
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String  @unique
  phone     String?
  createdAt DateTime @default(now())

  // Relation to Reservation
  reservations Reservation[]
}

model BusType {
  id          String   @id @default(cuid())
  busTypeName String
  capacity    Int
  description String
  createdAt   DateTime @default(now())

  // Relation to Reservation
  reservations Reservation[]
}

model Payment {
  id            String    @id @default(cuid())
  reservationId String
  amount        Int
  paymentStatus String
  paymentMethod String
  transactionId String
  createdAt     DateTime  @default(now())

  reservation   Reservation @relation(fields: [reservationId], references: [id])
}

model ActivityLog {
  id            String    @id @default(cuid())
  reservationId String
  actionType    String
  actionBy      String
  timestamp     DateTime  @default(now())

  reservation   Reservation @relation(fields: [reservationId], references: [id])
}

